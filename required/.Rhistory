samp_sub <- as.data.frame(fread("E:/competitions/numerai/example_predictions.csv", head=T))
train <- subset(train, select = -c(1,2,3))
new_test <- subset(test, select = -c(1,2,3))
comb <- rbind(train,new_test)
comp_test <- subset(new_test, select = -c(22))
#baseline logistic model
lm_model <- glm(data = comb, comb$target ~ .)
summary(lm_model)
lm_model
#prediction using baseline model
pred <- predict(lm_model, newdata = comp_test)
pred_df <- data.frame(test$id, pred)
colnames(pred_df) <- c('id','probability')
#check correlation
corrplot(cor(comb),type="lower")
#step_lm_model
step_lm_model <- step(lm_model)
summary(step_lm_model)
pred_step <- predict(step_lm_model, newdata = comp_test)
pred_step_df <- data.frame(test$id, pred_step)
colnames(pred_step_df) <- c('id','probability')
new_comb <- comb[!is.na(comb$target)]
predictors <- c(1:21)
target <- 22
cv_lasso_model <- cv.glmnet(as.matrix(new_comb[,predictors]), new_comb$target)
new_comb <- comb[!is.na(comb$target),]
predictors <- c(1:21)
target <- 22
cv_lasso_model <- cv.glmnet(as.matrix(new_comb[,predictors]), new_comb$target)
cv_lasso_model
summary(cv_lasso_model)
plot(cv_lasso_model)
cv_lasso_model$lambda.min
?predict
View(comp_test)
pred_lasso <- predict(cv_lasso_model, newx = comp_test, s = "lambda.min")
pred_lasso <- predict(cv_lasso_model, newdata = comp_test, s = "lambda.min")
pred_lasso <- predict(cv_lasso_model, newx = comp_test, s = "lambda.min")
pred_lasso <- predict(cv_lasso_model, newx = as.matrix(comp_test), s = "lambda.min")
pred_lasso_df <- data.frame(test$id, pred_lasso)
colnames(pred_lasso_df) <- c('id','probability')
write.csv(pred_lasso_df, file = "numerai_lasso.csv", row.names = FALSE)
summary(cv_lasso_model)
cv_lasso_model
corrplot(cor(comb),type="lower")
corrplot(cor(train),type="lower")
predictors <- c(1:14,16:21)
predictors
new_comb <- comb[!is.na(comb$target),]
predictors <- c(1:14,16:21)
target <- 22
cv_lasso_model <- cv.glmnet(as.matrix(new_comb[,predictors]), new_comb$target)
summary(cv_lasso_model)
plot(cv_lasso_model)
cv_lasso_model$lambda.min
pred_lasso <- predict(cv_lasso_model, newx = as.matrix(comp_test), s = "lambda.min")
pred_lasso_df <- data.frame(test$id, pred_lasso)
colnames(pred_lasso_df) <- c('id','probability')
write.csv(pred_lasso_df, file = "numerai_lasso.csv", row.names = FALSE)
View(comp_test)
comp_test_temp <- subset(comp_test,select = -c(15))
View(comp_test_temp)
new_comb <- comb[!is.na(comb$target),]
predictors <- c(1:14,16:21)
target <- 22
cv_lasso_model <- cv.glmnet(as.matrix(new_comb[,predictors]), new_comb$target)
summary(cv_lasso_model)
plot(cv_lasso_model)
cv_lasso_model$lambda.min
comp_test_temp <- subset(comp_test,select = -c(15))
pred_lasso <- predict(cv_lasso_model, newx = as.matrix(comp_test), s = "lambda.min")
pred_lasso_df <- data.frame(test$id, pred_lasso)
colnames(pred_lasso_df) <- c('id','probability')
write.csv(pred_lasso_df, file = "numerai_lasso1.csv", row.names = FALSE)
library(caret)
?train
View(new_comb)
lm_model1 <- train(data = new_comb, target ~ ., method = "glm")
lm_model1 <- train(data = new_comb, target ~ ., method = "plr")
lm_model1 <- train(data = new_comb, target ~ ., method = "regLogistic")
rm(list = ls())
data("iris")
iris <- data("iris")
library("MASS")
library("datasets", lib.loc="~/R/R-3.4.1/library")
iris
iris3
iris <- iris3
iris <- as.data.frame(iris3)
View(iris)
iris <- as.data.frame(iris)
View(iris)
detach("package:datasets", unload=TRUE)
iris <- read.csv("E:/ser_docs_manish/manish R scripts/iris.data")
View(iris)
iris <- read.csv("E:/ser_docs_manish/manish R scripts/iris.data", header = FALSE)
View(iris)
colnames(iris) <- c("Sepal_length","Sepal_width","Petal_length","Petal_width","Species")
View(iris)
train <- iris[,:2]
train <- iris[,1:2]
View(iris)
View(train)
plot(train)
library(ggplot2)
gpglot(data = iris, aes(iris[,1],iris[,2])) + geom_point(fill = iris[,5])
ggplot(data = iris, aes(iris[,1],iris[,2])) + geom_point(fill = iris[,5])
ggplot(data = iris, aes(iris[,1],iris[,2],fill = iris[,5])) + geom_point()
ggplot(data = iris, aes(Sepal_length, Sepal_width)) + geom_point(aes(color = Species))
ggplot(data = iris, aes(Sepal_length, Sepal_width)) + geom_point(aes(color = Species),pch=2)
ggplot(data = iris, aes(Sepal_length, Sepal_width)) + geom_point(aes(color = Species),pch=16)
ggplot(data = iris, aes(Sepal_length, Sepal_width)) + geom_point(aes(color = Species),pch=19)
ggplot(data = iris, aes(Sepal_length, Sepal_width)) + geom_point(aes(color = Species))
?svm
library(e1071)
svm_model <- svm(data = iris, Sepal_length ~ Sepal_width)
pred <- predict(svm_model, iris)
points(iris$Sepal_width, pred, col = "red")
geom_point(iris$Sepal_width, pred, col = "red")
plot(data = iris, Sepal_length ~ Sepal_width)
points(iris$Sepal_width, pred, col = "red")
lines(iris$Sepal_width, pred, col = "red")
points
points(iris$Sepal_width, pred, col = "red")
plot(data = iris, Sepal_length ~ Sepal_width)
points(iris$Sepal_width, pred, col = "red")
points(iris$Sepal_width, pred, col = "red", pch = 2)
points(iris$Sepal_width, pred, col = "red", pch = 16)
?svm
ggplot(data = iris, aes(Sepal_length, Sepal_width)) + geom_point(aes(color = Species))
predictors <- c("Sepal_length", "Sepal_width")
outcome <- "Species"
svm_model <- svm(data = iris, formula = outcome ~ predictors,kernel = 'linear')
svm_model <- svm(data = iris, x = as.matrix(iris[,predictors]), y = iris[,outcome],kernel = 'linear')
summary(svm_model)
plot(svm_model, data = iris, Sepal_length ~ Sepal_width)
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width)
svm_model
svm_model <- svm(data = iris, Species ~ ., kernel = 'linear')
svm_model
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width)
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width, slice = list(Sepal_length  = 3, Sepal_width  = 4))
install.packages("kernlab")
library(kernlab)
kernlab::plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width, slice = list(Sepal_length  = 3, Sepal_width  = 4))
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width, slice = list(Sepal_length  = 3, Sepal_width  = 4))
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width)
detach(kernlab)
detach("package:kernlab", unload=TRUE)
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width, slice = list(Petal_length  = 3, Petal_width  = 4))
plot(svm_model, data = iris,formula =  Sepal_length ~ Sepal_width, slice = list(Petal_length  = 4, Petal_width  = 3))
plot(svm_model, data = iris,formula =  Petal_length ~ Petal_width, slice = list(Sepal_length  = 4, Sepal_width  = 3))
plot(svm_model, data = iris,formula =  Petal_length ~ Petal_width, slice = list(Sepal_length  = 10, Sepal_width  = 3))
plot(svm_model, data = iris,formula =  Petal_length ~ Petal_width, slice = list(Sepal_length  = 3, Sepal_width  = 3))
plot(svm_model, data = iris,formula =  Petal_length ~ Petal_width, slice = list(Sepal_length  = 5, Sepal_width  = 5))
plot(svm_model, data = iris,formula =  Petal_length ~ Petal_width)
#loading libraries
library(shiny)
library(shinythemes)
library(DT)
library(data.table)
#loading dataset
iris <- read.csv("data/IRIS.csv", header = FALSE)
iris <- subset(iris, select = -c(2,4,6,8,5,7,9))
colnames(iris) <- c("Sepal_length", "Sepal_width")
#shinyUI
shinyUI(fluidPage(theme = shinytheme("cosmo"),
navbarPage("IRIS DATASET"),
sidebarLayout(
sidebarPanel(
p("This app will allow you to visualise",span("simple linear regressions", style="color:red")," between different variables."),
selectInput("select1",strong("Variable X :"), names(iris[,-5])),
selectInput("select2",strong("Variable Y :"), names(iris[,-5])),
numericInput("selectOrder", strong("Regression order :"), 1,min = 1, max = 10)
),
mainPanel(
plotOutput("plot1"),
hr(),
dataTableOutput("table1")
)
)
))
runApp('E:/shinyapps/required')
library(shinydashboard)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
table1 <- renderTable(
t1 <- table(c(1,2), ncol = 2, byrow=T)
)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
nrow(iris$Sepal_length)
View(iris)
colSums(is.na(iris))
nrow(iris)
colSums(iris$Sepal_length)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
View(iris)
summary(iris)
iris_sep <- c(nrow(iris[iris$Sepal_length < 5.5]))
iris_sep <- c(nrow(iris[iris$Sepal_length < 5.5,]))
iris_sep
rm(iris_sep)
summary(iris)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
iris_len
iris_len <- c(nrow(iris[iris$Sepal_length < 5.5,]))
iris_wi <- c(nrow(iris[iris$Sepal_length < 4,]))
runApp('E:/shinyapps/required')
iris_len
iris_wi
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
iris_len <- c(nrow(iris[iris$Sepal_length < 5.5,]))
iris_wi <- c(nrow(iris[iris$Sepal_width < 4,]))
shinyServer(function(input,output){
output$table1 <- renderTable(
as.table(c(iris_len, iris_wi)),
colnames = F
)
})
runApp('E:/shinyapps/required')
iris_wi
iris_len
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
iris_table <- data.frame(x = iris_len, y = iris_wi)
View(iris_table)
runApp('E:/shinyapps/required')
View(iris_table)
runApp('E:/shinyapps/required')
View(iris_table)
iris_table
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
View(iris_table)
iris_table$x
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
View(iris)
iris <- read.csv("data/IRIS.csv", header = FALSE)
iris <- subset(iris, select = -c(2,4,6,8,5,7,9))
colnames(iris) <- c("Sepal_length", "Sepal_width")
iris_len <- nrow(iris[iris$Sepal_length < 5.5,])
colnames(iris) <- c("Sepal_length", "Sepal_width")
iris_len <- nrow(iris[iris$Sepal_length < 5.5,])
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
output$table1 <- renderText(
iris_table
)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
View(iris_table)
View(iris_table)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
View(iris_table)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
install.packages("shinyjs")
library(shinyjs)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
iris_len
iris_len <- c(sum(iris$Sepal_length < 5.5))
iris_wi <- c(sum(iris$Sepal_width < 4))
iris_len
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
asd
asd <- c(sum(iris$Sepal_length < 5.5))
asd
iris_wi <- sum(iris$Sepal_width < 4)
iris_wi
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
asd <- reactiveValues()
asd <- c(sum(iris$Sepal_length < 5.5))
asd
asd
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
(NROW(iris[iris$Sepal_length < 5.5,])
(NROW(iris[iris$Sepal_length < 5.5,]))
c((NROW(iris[iris$Sepal_length < 5.5,])))
runApp('E:/shinyapps/required')
NROW(iris[iris$Sepal_length < 5.5,])
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
data('iris')
data()
data('iris')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
View(iris_table)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
library(shinyjs)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
shiny::runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/venky')
iris <- read.csv("data/IRIS.csv", header = FALSE)
iris <- subset(iris, select = -c(2,4,6,8,5,7,9))
colnames(iris) <- c("Sepal_length", "Sepal_width")
iris <- read.csv("data/IRIS.csv", header = FALSE)
rm(list = ls())
iris <- read.csv("data/IRIS.csv", header = FALSE)
iris <- subset(iris, select = -c(2,4,6,8,5,7,9))
colnames(iris) <- c("Sepal_length", "Sepal_width")
iris <- read.csv("E:/shinyapps/venky/data/IRIS.csv", header = FALSE)
iris <- subset(iris, select = -c(2,4,6,8,5,7,9))
colnames(iris) <- c("Sepal_length", "Sepal_width")
View(iris)
summary(iris)
iris_len <- sum(iris$Sepal_length < 5.5)
iris_wi <- sum(iris$Sepal_width < 4)
iris_table <- data.frame(x = iris_len, y = iris_wi)
View(iris_table)
View(iris_table)
View(iris)
rm(list = ls())
rm(list = ls())
#loading libraries
library(shiny)
library(DT)
library(shinydashboard)
library(shinyjs)
#loading dataset
iris <- read.csv("data/IRIS.csv", header = FALSE)
iris <- subset(iris, select = -c(2,4,6,8,5,7,9))
colnames(iris) <- c("Sepal_length", "Sepal_width")
#shinyUI
ui <- dashboardPage(
dashboardHeader(title = "Requirement"),
dashboardSidebar(),
dashboardBody(
fluidPage(
fluidRow(
box(
title = "Iris",
dataTableOutput(outputId="table1")
)
)
)
)
)
View(iris)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
library(shinyjs)
runApp('E:/shinyapps/required')
?verbatimTextOutput
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
iris <- read.csv("E:/shinyapps/required/data/iris.data")
View(iris)
iris <- read.csv("E:/shinyapps/required/data/iris.data", header = F)
View(iris)
colnames(iris) <- c('Sepal_length','Sepal_width','Petal_length','Petal_width','Species')
View(iris)
summary(iris)
table1 <- as.data.frame(x = c(nrow(iris[iris$Sepal_length < 5.5,])), y = c(nrow(iris[iris$Sepal_width < 3,])))
View(table1)
table1 <- data.frame(x = c(nrow(iris[iris$Sepal_length < 5.5,])), y = c(nrow(iris[iris$Sepal_width < 3,])))
View(table1)
runApp('E:/shinyapps/required')
View(table1)
table1 <- data.frame(x = c(nrow(iris[iris$Sepal_length < 5.5,])), y = c(nrow(iris[iris$Sepal_width < 2.9,])))
View(table1)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
table1 <- data.frame(x = c(nrow(iris[iris$Sepal_length < 5.5,])), y = c(nrow(iris[iris$Sepal_width < 2.9,])), row.names = FALSE)
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
runApp('E:/shinyapps/required')
summary(iris)
runApp('E:/shinyapps/required')
library(rsconnect)
setwd("E:/shinyapps/required")
runApp()
deployApp()
runApp()
runApp()
deployApp()
library(shiny)
library(DT)
deployApp()
rm(list = ls())
?scan
kings <- scan("C:/Users/manish.sharma/Downloads/kings.dat")
kings <- scan("C:/Users/manish.sharma/Downloads/kings.dat", skip = 3)
kings <- scan("C:/Users/manish.sharma/Downloads/kings.dat.txt", skip = 3)
kings
kings_ts <- ts(kings)
kings_ts
plot.ts(kings_ts)
install.packages("TTR")
library(TTR)
kings_trend3 <- SMA(kings_ts, n = 3)
plot.ts(kings_trend3)
kings_trend8 <- SMA(kings_ts, n = 8)
plot.ts(kings_trend8)
kings_components <- decompose(kings)
